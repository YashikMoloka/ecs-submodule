public void RemoveT#INDEX#(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T#INDEX#>.burstTypeId.Data, code = 2, }); }
public void Set(int index, in T#INDEX# component) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T#INDEX#>.burstTypeId.Data, code = 1, }); UnsafeUtility.WriteArrayElement(this.regs[#INDEX#].value, this.indexes[index], component); }
public ref T#INDEX# GetT#INDEX#(int index) { this.componentOps.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T#INDEX#>.burstTypeId.Data, code = 1, }); return ref UnsafeUtility.ArrayElementAsRef<Component<T#INDEX#>>(this.regs[#INDEX#].value, this.indexes[index]).data;}
public ref readonly T#INDEX# ReadT#INDEX#(int index) { return ref UnsafeUtility.ArrayElementAsRef<Component<T#INDEX#>>(this.regs[#INDEX#].value, this.indexes[index]).data; }
public bool HasT#INDEX#(int index) => UnsafeUtility.ReadArrayElement<Component<T#INDEX#>>(this.regs[#INDEX#].value, this.indexes[index]).state > 0;
public long GetVersionT#INDEX#(int index) => UnsafeUtility.ArrayElementAsRef<Component<T#INDEX#>>(this.regs[#INDEX#].value, this.indexes[index]).version;
